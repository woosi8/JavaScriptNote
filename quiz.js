2. What's the output?
for (var i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 1);
}

for (let i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 1);
}

Since the variable i in the first loop was declared using the var keyword, this value was global.
During the loop, we incremented the value of i by 1 each time, using the unary operator ++. By the time the setTimeout callback function was invoked,
i was equal to 3 in the first example.

In the second loop, the variable i was declared using the let keyword: variables declared with the let (and const) keyword are block-scoped (a block is anything between { }).
During each iteration, i will have a new value, and each value is scoped inside the loop.



Answer = C: 3 3 3 and 0 1 2

7.
new Number() is a built-in function constructor.
When we use the == operator, it only checks whether it has the same value. They both have the value of 3, so it returns true.
However, when we use the === operator, both value and type should be the same. It's not: new Number() is not a number, it's an object. Both return false.


18.
This is why both { age: 18 } === { age: 18 } and { age: 18 } == { age: 18 } return false.
JavaScript checks if the objects have a reference to the same location in memory.

20.
With "use strict", you can make sure that you don't accidentally declare global variables. 

24.
All object keys (excluding Symbols) are strings under the hood, even if you don't type it yourself as a string. 


28. What's the output?
String.prototype.giveLydiaPizza = () => {
  return 'Just give Lydia pizza already!';
};

const name = 'Lydia';

name.giveLydiaPizza();

A: "Just give Lydia pizza already!"
String is a built-in constructor, which we can add properties to. I just added a method to its prototype. 
Primitive strings are automatically converted into a string object, generated by the string prototype function.
 So, all strings (string objects) have access to that method!


40.
 const red = [[0, 1], [2, 3]].reduce(
  (acc, cur) => {
    return acc.concat(cur);
  },
  [1, 2],
);
console.log(red);